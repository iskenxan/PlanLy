import PushNotification from 'react-native-push-notification';
import moment from 'moment';
import _ from 'lodash';
import { calculateStartTime } from './Formatter';
import {
  ACCENT_ORANGE,
} from '../colors';

PushNotification.configure({

  // (optional) Called when Token is generated (iOS and Android)
  onRegister(token) {
    console.log('TOKEN:', token);
  },

  // (required) Called when a remote or local notification is opened or received
  onNotification(notification) {
    console.log('NOTIFICATION:', notification);

    // process the notification
  },
  // Should the initial notification be popped automatically
  // default: true
  popInitialNotification: true,

  requestPermissions: true,
});


const notificationSettings = {
  /* Android Only Properties */
  // id: '0',  (optional) Valid unique 32 bit integer specified as string.
  // default: Autogenerated Unique ID
  autoCancel: true, // (optional) default: true
  color: ACCENT_ORANGE, // (optional) default: system default
  vibrate: true, // (optional) default: true
  vibration: 300, // vibration length in milliseconds, ignored if vibrate=false, default: 1000
  tag: 'some_tag', // (optional) add tag to message
  group: 'group', // (optional) add group to message
  ongoing: false, // (optional) set whether this is an "ongoing" notification
  priority: 'high', // (optional) set notification priority, default: high
  visibility: 'private', // (optional) set notification visibility, default: private
  importance: 'high', // (optional) set notification importance, default: high


  /* iOS and Android properties */
  title: 'My Notification Title', // (optional)
  message: 'My Notification Message', // (required)
  playSound: false, // (optional) default: true
  repeatType: 'week',
  soundName: 'default', // (optional) Sound to play when the notification is shown. Value of 'default' plays the default sound. It can be set to a custom sound such as 'android.resource://com.xyz/raw/my_sound'. It will look for the 'my_sound' audio file in 'res/raw' directory and play it. default: 'default' (default sound is played)
  number: '10', // (optional) Valid 32 bit integer specified as string. default: none (Cannot be zero)
  actions: '["View Schedule"]', // (Android only) See the doc for notification actions to know more
};


const getScheduledDate = (day, startTime) => {
  const current = moment();
  const next = moment();
  next.day(day);
  const dayInNeed = next.isoWeekday();
  const today = current.isoWeekday();

  if (today > dayInNeed) {
    next.add(1, 'week');
  }

  const dateString = next.format('YYYY-MM-DD');
  const dateTimeString = `${dateString} ${startTime}`;

  const finalMoment = moment(dateTimeString, 'YYYY-MM-DD h:mm a');
  const finalUnix = finalMoment.unix();
  const currentUnix = current.unix();
  if (finalUnix < currentUnix) {
    finalMoment.add(1, 'week');
  }

  const finalDate = finalMoment.toDate();

  return finalDate;
};


export const createTaskNotification = (day, startTime, title) => {
  const id = Math.floor((Math.random() * 1000000000) + 1);
  const settings = { ...notificationSettings };
  settings.id = id;
  settings.title = 'Scheduled Task';
  settings.message = `Looks like it's time to: ${title}`;
  const date = getScheduledDate(day, startTime);

  settings.date = date;

  PushNotification.localNotificationSchedule(settings);

  return id;
};


const addNotificationForTasks = (tasks, day, scrollHeight) => {
  _.mapKeys(tasks, (task) => {
    const { y, title } = task;
    const startTime = calculateStartTime(y, scrollHeight);
    createTaskNotification(day, startTime, title);
  });
};


export const addNotificationsForAllTasks = (weekPlan,
  scrollHeight) => {
  _.mapKeys(weekPlan, (weekDay, key) => {
    const day = key;
    const { tasks } = weekDay;
    addNotificationForTasks(tasks, day, scrollHeight);
  });
};


export const cancelAllNotifications = () => {
  PushNotification.cancelAllLocalNotifications();
};
